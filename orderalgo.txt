let order = [{"name": "abc", quantity:3},{"name": "def", quantity:4}];

let corder = [{"name": "thy", quantity:2},{"name": "def", quantity:2},{"name": "abc", quantity:6}]

corder.map((item) => {
let prodid = order.findIndex((ci) => ci.name === item.name);
if(prodid !== -1){
order[prodid].quantity = order[prodid].quantity + item.quantity;
}
})

console.log(order);




// Order.find({ table: tableId })
          //   .then(async (orderDetails) => {
          //     console.log(orderDetails[0].order);
          //     // return res.json(orderDetails[0].order);
          //     let newOrderData = orderDetails[0].order;
          //     foodOrder.map((item) => {
          //       let prodId = newOrderData.findIndex(
          //         (it) => it.foodName === item.foodName
          //       );
          //       if (prodId !== -1) {
          //         newOrderData[prodId].quantity =
          //           newOrderData[prodId].quantity + item.quantity;
          //       } else {
          //         newOrderData = [...newOrderData, item];
          //       }
          //     });
          //     try {
          //       const finalresult = await Order.findOneAndUpdate({ table: tableId }, {$set:{
          //         order: newOrderData
          //       }});
          //       return "done!!!!!!!!!!";
          //     } catch (error) {
          //       console.log(error);
          //       return res.json(error);
          //     }
          //   })
          //   .catch((err) => console.log(err));
          // console.log(orderDetails)



          "test": "jest --watch --testPathPattern=Test"


          // const chai = require("chai");
// const expect = chai.expect;
// const chaiAsPromised = require("chai-as-promised");
// const sinon = require("sinon");
// const sinonChai = require("sinon-chai");
// chai.use(chaiAsPromised);
// chai.use(sinonChai);

// var mongoose = require("mongoose");

// var testFn = require("../controllerFunctions/testControllerFn");
// var TestModal = require("../model/testProductModel");

// var sandbox = sinon.createSandbox();

// describe("test", () => {
//   let findStub;
//   let sampleArgs;
//   let sampleTest;

//   beforeEach(() => {
//     sampleTest = {
//       _id: "64b1502d3e15df4bdb1db119",
//       name: "IJK",
//       status: true,
//       items: [],
//     };

//     findStub = sandbox.stub(mongoose.Model, "findById").resolves(sampleTest);
//   });

//   afterEach(() => {
//     sandbox.restore();
//   });

//   it("Should run the test", (done) => {
//     testFn.getTestUser(null, (err, result) => {
//         console.log(result);
//         expect(err).to.exist;
//         done();
//     });
//   });
// });

const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");

const mongod = async () => {
  return await MongoMemoryServer.create();
};

module.exports.connect = async () => {
  const uri = mongod().getUri();
  const mongooseOpts = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    poolSize: 10,
  };
  await mongoose.connect(uri, mongooseOpts);
};

module.exports.clearDatabase = async () => {
    const collections = mongoose.connection.collections;
    for(const key in collections){
        const collection = collections[key];
        await collection.deleteMany();
    }
};

module.exports.closeDatabase = async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.connection.close();
  await mongod().stop();
};

